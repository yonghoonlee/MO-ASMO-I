% The PLOT_VALIDATION script is called by main script to plot val pts.
% Usage: PLOT_VALIDATION

% Multiobjective Adaptive Surrogate Modeling-based Optimization Toolbox I
% Author: Yong Hoon Lee (ylee196@illinois.edu, yonghoonlee@outlook.com)
% Please refer to LICENSE.TXT for licensing details.
% Some directories may include codes from different author or with
% different license. In this case, please refer to LICENSE file or
% LICENSE.TXT file in each corresponding subdirectories.

% Validation points plot in design space
figure(fg0);
subplot(2,1,1);
for i = 1:size(DATA{k,9},1)
    tmpdat = DATA{k,9}(i,:);
    tmpdat = (tmpdat - problem.xlb')./(problem.xub' - problem.xlb');
    p5 = plot(1:(problem.nxvar),tmpdat,'k:','LineWidth',2);
    hold on;
end
clear tmpdat;
legend([p5],{'validation point'},...
    'Location','north','Interpreter','latex','FontSize',16);
%legend('boxoff');
subplot(2,1,2);
for i = 1:size(DATA{k,10},1)
    tmpdat1 = DATA{k,11}(i,:);
    tmpdat1 = (tmpdat1 - problem.flb')./(problem.fub' - problem.flb');
    tmpdat2 = DATA{k,10}(i,:);
    tmpdat2 = (tmpdat2 - problem.flb')./(problem.fub' - problem.flb');
    p6 = plot(1:(problem.nfvar),tmpdat1,'k-','LineWidth',2);
    p7 = plot(1:(problem.nfvar),tmpdat2,'k:','LineWidth',2);
    hold on;
end
clear tmpdat1;
clear tmpdat2;
legend([p7,p6],{'predicted result','high-fidelity fn result'},...
    'Location','north','Interpreter','latex','FontSize',16);
%legend('boxoff');
if (problem.control.plotexport ~= 0)
    eval(['export_fig ',fullfile(problem.probpath,...
        ['fig_designspval_',num2str(k),'.pdf']), ' -pdf']);
end

% Validation points plot in objective function space
figure(fg1);
for i = 1:size(DATA{k,10}(:,1),1)
    p8 = plot([DATA{k,10}(i,1),DATA{k,11}(i,1)],...
        [DATA{k,10}(i,2),DATA{k,11}(i,2)],'r:','LineWidth',1.5); hold on;
end
p9 = plot(DATA{k,10}(:,1),DATA{k,10}(:,2),'+',...
    'MarkerEdgeColor',[1 0 0],'MarkerSize',10,'LineWidth',2); hold on;
p10 = plot(DATA{k,11}(:,1),DATA{k,11}(:,2),'s',...
    'MarkerEdgeColor',[1 0 0],'MarkerSize',10,'LineWidth',2); hold on;
if (isfield(problem,'plotrange'))
    if (isfield(problem.plotrange,'xmin') ...
            && isfield(problem.plotrange,'xmax') ...
            && isfield(problem.plotrange,'ymin') ...
            && isfield(problem.plotrange,'ymax'))
        axis([min(problem.plotrange.xmin,...
                min(min(DATA{k,6}(:,1)),...
                min(min(DATA{k,10}(:,1)),min(DATA{k,11}(:,1))))) ...
            max(problem.plotrange.xmax,...
                max(max(DATA{k,6}(:,1)),...
                max(max(DATA{k,10}(:,1)),max(DATA{k,11}(:,1))))) ...
            min(problem.plotrange.ymin,...
                min(min(DATA{k,6}(:,2)),...
                min(min(DATA{k,10}(:,2)),min(DATA{k,11}(:,2))))) ...
            max(problem.plotrange.ymax,...
                max(max(DATA{k,6}(:,2)),...
                max(max(DATA{k,10}(:,2)),max(DATA{k,11}(:,2)))))]);
    end
end
legend([p1,p9,p10],{'predicted Pareto set','validation point',...
    'high fidelity fn result'},...
    'Location','southwest','Interpreter','latex','FontSize',16);
%legend('boxoff');
if (problem.control.plotexport ~= 0)
    eval(['export_fig ',fullfile(problem.probpath,...
        ['fig_paretoval_',num2str(k),'.pdf']), ' -pdf']);
end

% Validation points plot for inexpensive functions in objective fn space
if (problem.highfidelity.expensive == 0)        % If fn eval is not costly
    figure(fg2);
    for i = 1:size(DATA{k,10}(:,1),1)
        p11 = plot([DATA{k,10}(i,1),DATA{k,11}(i,1)],...
            [DATA{k,10}(i,2),DATA{k,11}(i,2)],'r:','LineWidth',1.5);
        hold on;
    end
    p12 = plot(DATA{k,10}(:,1),DATA{k,10}(:,2),'+',...
        'MarkerEdgeColor',[1 0 0],'MarkerSize',10,'LineWidth',2); hold on;
    p13 = plot(DATA{k,11}(:,1),DATA{k,11}(:,2),'s',...
        'MarkerEdgeColor',[1 0 0],'MarkerSize',10,'LineWidth',2); hold on;
    if (isfield(problem,'plotrange'))
        if (isfield(problem.plotrange,'xmin') ...
                && isfield(problem.plotrange,'xmax') ...
                && isfield(problem.plotrange,'ymin') ...
                && isfield(problem.plotrange,'ymax'))
            axis([min(problem.plotrange.xmin, ...
                    min([DATA{k,6}(:,1); DATA{k,7}(:,1)])) ...
                max(problem.plotrange.xmax, ...
                    max([DATA{k,6}(:,1); DATA{k,7}(:,1)])) ...
                min(problem.plotrange.ymin, ...
                    min([DATA{k,6}(:,2); DATA{k,7}(:,2)])) ...
                max(problem.plotrange.ymax, ...
                    max([DATA{k,6}(:,2); DATA{k,7}(:,2)]))]);
        end
    end
    legend([p3,p2,p12,p13],...
        {'predicted Pareto set','high fidelity fn result',...
        'validation point','high fidelity fn result'},...
        'Location','southwest','Interpreter','latex','FontSize',16);
    %legend('boxoff');
    if (problem.control.plotexport ~= 0)
        eval(['export_fig ',fullfile(problem.probpath,...
            ['fig_paretoval_compare_',num2str(k),'.pdf']), ' -pdf']);
    end
end